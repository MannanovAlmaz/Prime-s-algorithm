package Algorithm;

import java.util.ArrayList;
import java.util.List;

public class Main {
    static long startTime = System.currentTimeMillis();
    public static List<Vertex> createGraph() {
        List<Vertex> graph = new ArrayList<>();
        Vertex a = new Vertex("A");
        Vertex b = new Vertex("B");
        Vertex c = new Vertex("C");
        Vertex d = new Vertex("D");
        Vertex e = new Vertex("E");
        Vertex f = new Vertex("F");
        Vertex g = new Vertex("G");
        Vertex h = new Vertex("H");
        Vertex i = new Vertex("I");
        Vertex j = new Vertex("J");
        Vertex k = new Vertex("K");
        Vertex l = new Vertex("L");
        Vertex m = new Vertex("M");
        Vertex n = new Vertex("N");
        Vertex o = new Vertex("O");
        Vertex p = new Vertex("P");
        Vertex q = new Vertex("Q");
        Vertex r = new Vertex("R");
        Vertex s = new Vertex("S");
        Vertex t = new Vertex("T");
        Vertex u = new Vertex("U");
        Vertex v = new Vertex("V");
        Vertex w = new Vertex("W");
        Vertex x = new Vertex("X");
        Vertex y = new Vertex("Y");
        Vertex z = new Vertex("Z");
        Edge ab = new Edge((int) (Math.random()*10));
        a.addEdge(b, ab);
        b.addEdge(a, ab);
        Edge ac = new Edge((int) (Math.random()*10));
        a.addEdge(c, ac);
        c.addEdge(a, ac);
        Edge bc = new Edge((int) (Math.random()*10));
        b.addEdge(c, bc);
        c.addEdge(b, bc);
        Edge be = new Edge((int) (Math.random()*10));
        b.addEdge(e, be);
        e.addEdge(b, be);
        Edge cd = new Edge((int) (Math.random()*10));
        c.addEdge(d, cd);
        d.addEdge(c, cd);
        Edge ce = new Edge((int) (Math.random()*10));
        c.addEdge(e, ce);
        e.addEdge(c, ce);
        Edge de = new Edge((int) (Math.random()*10));
        d.addEdge(e, de);
        e.addEdge(d, de);
        Edge df = new Edge((int) (Math.random()*10));
        d.addEdge(f, df);
        f.addEdge(d, df);
        Edge eg = new Edge((int) (Math.random()*10));
        e.addEdge(g, eg);
        g.addEdge(e, eg);
        Edge eh = new Edge((int) (Math.random()*10));
        e.addEdge(h, eh);
        h.addEdge(e, eh);
        Edge fg = new Edge((int) (Math.random()*10));
        f.addEdge(g, fg);
        g.addEdge(f, fg);
        Edge fi = new Edge((int) (Math.random()*10));
        f.addEdge(i, fi);
        i.addEdge(f, fi);
        Edge gh = new Edge((int) (Math.random()*10));
        g.addEdge(h, gh);
        h.addEdge(g, gh);
        Edge gi = new Edge((int) (Math.random()*10));
        g.addEdge(i, gi);
        i.addEdge(g, gi);
        Edge hj = new Edge((int) (Math.random()*10));
        h.addEdge(j, hj);
        j.addEdge(h, hj);
        Edge hk = new Edge((int) (Math.random()*10));
        h.addEdge(k, hk);
        k.addEdge(h, hk);
        Edge ig = new Edge((int) (Math.random()*10));
        i.addEdge(g, ig);
        g.addEdge(i, ig);
        Edge il = new Edge((int) (Math.random()*10));
        i.addEdge(l, il);
        l.addEdge(i, il);
        Edge jk = new Edge((int) (Math.random()*10));
        j.addEdge(k, jk);
        k.addEdge(j, jk);
        Edge jl = new Edge((int) (Math.random()*10));
        j.addEdge(l, jl);
        l.addEdge(j, jl);
        Edge km = new Edge((int) (Math.random()*10));
        k.addEdge(m, km);
        m.addEdge(k, km);
        Edge ko = new Edge((int) (Math.random()*10));
        k.addEdge(o, ko);
        o.addEdge(k, ko);
        Edge lm = new Edge((int) (Math.random()*10));
        l.addEdge(m, lm);
        m.addEdge(l, lm);
        Edge lo = new Edge((int) (Math.random()*10));
        l.addEdge(o, lo);
        o.addEdge(l, lo);
        Edge mn = new Edge((int) (Math.random()*10));
        m.addEdge(n, mn);
        n.addEdge(m, mn);
        Edge mp = new Edge((int) (Math.random()*10));
        m.addEdge(p, mp);
        p.addEdge(m, mp);
        Edge np = new Edge((int) (Math.random()*10));
        n.addEdge(p, np);
        p.addEdge(n, np);
        Edge nq = new Edge((int) (Math.random()*10));
        n.addEdge(q, nq);
        q.addEdge(n, nq);
        Edge no = new Edge((int) (Math.random()*10));
        n.addEdge(o, no);
        o.addEdge(n, no);
        Edge op = new Edge((int) (Math.random()*10));
        o.addEdge(p, op);
        p.addEdge(o, op);
        Edge or = new Edge((int) (Math.random()*10));
        o.addEdge(r, or);
        r.addEdge(o, or);
        Edge pq = new Edge((int) (Math.random()*10));
        p.addEdge(q, pq);
        q.addEdge(p, pq);
        Edge ps = new Edge((int) (Math.random()*10));
        p.addEdge(s, ps);
        s.addEdge(p, ps);
        Edge qs = new Edge((int) (Math.random()*10));
        q.addEdge(s, qs);
        s.addEdge(q, qs);
        Edge qt = new Edge((int) (Math.random()*10));
        q.addEdge(t, qt);
        t.addEdge(q, qt);
        Edge rs = new Edge((int) (Math.random()*10));
        r.addEdge(s, rs);
        s.addEdge(r, rs);
        Edge rt = new Edge((int) (Math.random()*10));
        r.addEdge(t, rt);
        t.addEdge(r, rt);
        Edge su = new Edge((int) (Math.random()*10));
        s.addEdge(u, su);
        u.addEdge(s, su);
        Edge sw = new Edge((int) (Math.random()*10));
        s.addEdge(w, sw);
        w.addEdge(s, sw);
        Edge tj = new Edge((int) (Math.random()*10));
        t.addEdge(j, tj);
        j.addEdge(t, tj);
        Edge tk = new Edge((int) (Math.random()*10));
        t.addEdge(k, tk);
        k.addEdge(t, tk);
        Edge tu = new Edge((int) (Math.random()*10));
        t.addEdge(u, tu);
        u.addEdge(t, tu);
        Edge uz = new Edge((int) (Math.random()*10));
        u.addEdge(z, uz);
        z.addEdge(u, uz);
        Edge uf = new Edge((int) (Math.random()*10));
        u.addEdge(f, uf);
        f.addEdge(u, uf);
        Edge vw = new Edge((int) (Math.random()*10));
        v.addEdge(w, vw);
        w.addEdge(v, vw);
        Edge vx = new Edge((int) (Math.random()*10));
        v.addEdge(x, vx);
        x.addEdge(v, vx);
        Edge wy = new Edge((int) (Math.random()*10));
        w.addEdge(y, wy);
        y.addEdge(w, wy);
        Edge wl = new Edge((int) (Math.random()*10));
        w.addEdge(l, wl);
        l.addEdge(w, wl);
        Edge wx = new Edge((int) (Math.random()*10));
        w.addEdge(x, wx);
        x.addEdge(w, wx);
        Edge xy = new Edge((int) (Math.random()*10));
        x.addEdge(y, xy);
        y.addEdge(x, xy);
        Edge xz = new Edge((int) (Math.random()*10));
        x.addEdge(z, xz);
        z.addEdge(x, xz);
        Edge yc = new Edge((int) (Math.random()*10));
        y.addEdge(c, yc);
        c.addEdge(y, yc);
        Edge yq = new Edge((int) (Math.random()*10));
        y.addEdge(q, yq);
        q.addEdge(y, yq);
        Edge zb = new Edge((int) (Math.random()*10));
        z.addEdge(b, zb);
        b.addEdge(z, zb);
        Edge zg = new Edge((int) (Math.random()*10));
        z.addEdge(g, zg);
        g.addEdge(z, zg);
        graph.add(a);
        graph.add(b);
        graph.add(c);
        graph.add(d);
        graph.add(e);
        graph.add(f);
        graph.add(g);
        graph.add(h);
        graph.add(i);
        graph.add(j);
        graph.add(k);
        graph.add(l);
        graph.add(m);
        graph.add(n);
        graph.add(o);
        graph.add(p);
        graph.add(q);
        graph.add(r);
        graph.add(s);
        graph.add(t);
        graph.add(u);
        graph.add(v);
        graph.add(w);
        graph.add(x);
        graph.add(y);
        graph.add(z);
        return graph;

    }


    public static void main(String[] args) {
        Prim prim = new Prim(createGraph());
        System.out.println(prim.originalGraphToString());
        System.out.println("----------------");
        prim.run();
        System.out.println();
        prim.resetPrintHistory();
        System.out.println(prim.minimumSpanningTreeToString());
        long endTime = System.currentTimeMillis();
        System.out.println("Потраченное время: ");
        System.out.println(endTime - startTime);
    }


}
